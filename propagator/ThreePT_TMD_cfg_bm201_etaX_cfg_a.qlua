require "stdlib"
require "gauge"
require "qcd" 
require "staple_link_nonZero_bP_constraint_vX0Z_bm201_"
require "gauge_U"

-- 2pt
function make_hadspec_standard(c2pt, tsrc, lt, bc_t)
  local c2pt_std = vector.complex(lt)
  for i = 0, tsrc-1 do
    c2pt_std[lt + i - tsrc] = bc_t * c2pt[i]
  end
  for i = tsrc, lt-1 do
    c2pt_std[i - tsrc] = c2pt[i]
  end
  return c2pt_std
end


function qcd_proton3(d, u)
  local S =  gamma{mu=0} * gamma{mu=2} * (1 + gamma{mu=3}) / 2
  local T =  (1 - gamma{mu=0}*gamma{mu=1}*complex(0,1)) * (1 + gamma{mu=3}) / 2
  local a2 = T * u
  local a3 = qcd.quarkContract13(d * S, S * u)
  return (a2:spintrace() * a3:spintrace() + (a2 * a3):spintrace()):trace()
end




Nx = 32
Ny = 32
Nz = 32
Nt = 96
latsize = {Nx,Ny,Nz,Nt}
network_geom = {4, 4, 4, 3}



-- handy function to copy tables
function copy_table(tab) 
  local a = {}; for i,v in pairs(tab) do a[i] = v end
  return a
end


tsnk = 10  -- sink timeslice
psnk = {-1,0,0,0} -- sink momentum
t_axis = 3  -- axis; currently works for t_axis ==3
qlist = {{0,0,0,0}}  -- list of insertion momenta {q}; each q be with #q = #L
time_rev = false
bc_2pt_t =  -1 -- BC for 2pt function in t dir; need to get the correct sign for 3pt's
sources = {{0, 0, 0, 0}, {8, 0, 0, 0}, {16, 0, 0, 0}, {24, 0, 0, 0}, {0, 8, 0, 0}, {0, 16, 0, 0}, {0, 24, 0, 0}, {0, 0, 8, 0}, {0, 0, 16, 0}, {0, 0, 24, 0}}
flavor_list = { "D", "U"}
gamma_list = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}

-- In qlua: 0123 -> xyzt

h5_writer = qcd.hdf5.Writer("/pscratch/sd/h/hari_8/save_prop_TMDs/h5_TMD_saved/h5_files_cfgs_0123_xyzt/save_TMD3pt__b_-2_0_1__v_03_1_0_eta9m9_cfg_b_corrected_".. tostring(cfg) .. "_.h5") 



local L = qcd.lattice(latsize,{network=network_geom})
local stream = "_b_"
local cfgstream = "b_"

local U = gauge_from_cfg(cfg, cfgstream, L)
for i, src_i in pairs(sources) do
  printf("src %d %d %d %d \n", src_i[1], src_i[2], src_i[3], src_i[4])
  local csrc = {src_i[1], src_i[2], src_i[3], src_i[4]}
  local tsrc = csrc[1+t_axis]
  printf("2pt\n")
  -- calculate and save 2pt
  local reader_snk_smear_fw_p, rinfo_snk_smear_fw_p = qcd.qdpc.Reader(L, "/pscratch/sd/h/hari_8/save_prop_TMDs/SinkSmeared_forward." .. stream .. tostring(cfg) .. ".x" .. tostring(src_i[1]) .. "y" .. tostring(src_i[2]) .. "z" .. tostring(src_i[3]) .. "t" .. tostring(src_i[4]) .. ".dirprop")
  local snk_smear_fw_p, f_info_smear_fw = reader_snk_smear_fw_p:DiracPropagator()           -- forward propagator
  
  local reader_fw, rinfo_fw = qcd.qdpc.Reader(L, "/pscratch/sd/h/hari_8/save_prop_TMDs/forward." .. stream .. tostring(cfg) .. ".x" .. tostring(src_i[1]) .. "y" .. tostring(src_i[2]) .. "z" .. tostring(src_i[3]) .. "t" .. tostring(src_i[4]) .. ".dirprop.with_header")
  local fw_p, f_info_fw = reader_fw:DiracPropagator()           -- forward propagator

  local qq = qcd_proton3(snk_smear_fw_p, snk_smear_fw_p)
  local psnk_list_neg = {}
  for j,pj in ipairs(psnk) do
    psnk_list_neg[j] = -pj
  end
  psnk_list_neg[1+t_axis] = 0
  local psnk_pw = L:planewave(csrc, psnk_list_neg)
  local mset_tcoord = L:MultiSet(tsnk+1, L:pcoord(t_axis))
  local pt2 = make_hadspec_standard(qq:project(psnk_pw, mset_tcoord), tsrc, tsnk+1, bc_2pt_t)
  local path_to_pt2 = string.format("/cfg_%s/TwoPT_proton3/x%d_y%d_z%d_t%d/PX%d_PY%d_PZ%d_T%d", cfg, csrc[1], csrc[2], csrc[3], csrc[4], psnk[1], psnk[2], psnk[3], tsnk)
  local write_options = { transfer = "collective", precision = "double" }
  h5_writer:write(path_to_pt2, pt2, write_options)  
  printf("3pt\n")
  -- calculate and save 3pt
  for n, flavor in pairs(flavor_list) do 
    local reader_bw, rinfo_bw = qcd.qdpc.Reader(L, "/pscratch/sd/h/hari_8/save_prop_TMDs/bkw_prop." .. stream .. tostring(cfg) .. ".x" .. tostring(src_i[1]) .. "y" .. tostring(src_i[2]) .. "z" .. tostring(src_i[3]) .. "t" .. tostring(src_i[4]) .. "T" .. tostring(tsnk) .. ".PX" .. tostring(psnk[1]) .. "PY" .. tostring(psnk[2]) .. "PZ" .. tostring(psnk[3]) .. ".proton_3." .. tostring(flavor) .. ".seq_prop")
    local bw_p, f_info_bw = reader_bw:DiracPropagator()       -- backward propagator, Dslash^-1 * g5 * SeqSrc^\dag *g5
    
    -- from clover 3pt
    local function h5_keypath(gn, qext, eta)
      return string.format("/cfg_%s/ThreePT_flavor_%s/x%d_y%d_z%d_t%d/PX%d_PY%d_PZ%d_T%d/g%d/qx%d_qy%d_qz%d/eta%d", cfg, flavor, csrc[1], csrc[2], csrc[3], csrc[4], psnk[1], psnk[2], psnk[3], tsnk, gn, qext[1], qext[2], qext[3], eta)
    end
    local lt = L[t_axis]
    -- calc source-sink separation
    local src_snk_dt = nil
    if not time_rev then
      if tsrc < tsnk then src_snk_dt = tsnk - tsrc
      else src_snk_dt = lt + tsnk - tsrc end
    else
      if tsnk < tsrc then src_snk_dt = tsrc - tsnk
      else src_snk_dt = lt + tsrc - tsnk end
    end
    local qlist_pw = {}
    for i,q in pairs(qlist) do
      local q_cp = copy_table(q)
      q_cp[1+t_axis] = 0
      qlist_pw[i] = L:planewave(csrc, q_cp)
    end
    -- init timeslice subsets
    local time_mset = L:MultiSet(L[t_axis], L:pcoord(t_axis))
    local mset_src_snk = nil
    if not time_rev then
      mset_src_snk = L:MultiSet(src_snk_dt + 1, (lt - tsrc + L:pcoord(t_axis)) % lt)
    else
      mset_src_snk = L:MultiSet(src_snk_dt + 1, (lt + tsrc - L:pcoord(t_axis)) % lt)
    end

    -- compute contractions with 16 gammas, project on momenta, save bb
    for eta = -9, 9, 1 do
      local staple = staple_link(U, eta)
      local staple_fwpropSHIFTS_g5bwpropADJg5 = staple * fw_p:shift(0, "from_backward"):shift(0, "from_backward"):shift(2, "from_forward") * gamma{n=15} *  bw_p:adjoin() * gamma{n=15}
      for i_gn, gn in pairs(gamma_list) do
        local bb = (gamma{n=gn} * staple_fwpropSHIFTS_g5bwpropADJg5):trace()
        -- local bb = qcd.dot(gamma{n=15} * bw_p * gamma{n=15}, gamma{n=gn} * staple_fwprop)
        if time_rev then
          if (gn < 8) then bb = bb * bc_2pt_t
          else bb = bb * (-bc_2pt_t) end
        end
        for iq = 1, #qlist do
          local write__options = { transfer = "collective", precision = "double" }
          h5_writer:write(h5_keypath(gn, qlist[iq], eta), bb:project(qlist_pw[iq], mset_src_snk), write__options)
        end
      end
    end
  end
end

h5_writer:close()

