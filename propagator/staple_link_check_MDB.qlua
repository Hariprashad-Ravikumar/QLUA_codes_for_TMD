require "stdlib"
require "gauge"
require "qcd" 

-- check for veryfing mathematica Database
-- b = {2, 1, 0}

local function linkPath_121(U)
  local link = {}
  link[1] = U[0+1]
  link[2] = U[1+1]:shift(0, "from_forward")
  link[3] = link[1]:shift(0, "from_forward"):shift(1, "from_forward")
  
  local gauge_link = link[1]
  for mm = 2, #link do
    gauge_link = gauge_link * link[mm]
  end
  return gauge_link
end



local function sideLink_31(U)
  local link_along_b = {}
  local link_eta_Go = {}
  local link_eta_Come = {}

  local linkb = {}
  linkb[1] = U[0+1]
  linkb[2] = U[1+1]:shift(0, "from_forward")
  linkb[3] = linkb[1]:shift(0, "from_forward"):shift(1, "from_forward")

  link_along_b[1] = linkb[1]:shift(2, "from_forward"):shift(0, "from_forward")
  link_along_b[2] = linkb[2]:shift(2, "from_forward"):shift(0, "from_forward")
  link_along_b[3] = linkb[3]:shift(2, "from_forward"):shift(0, "from_forward")

  link_eta_Go[1] = U[1+2]
  link_eta_Go[2] = U[1+0]:shift(2, "from_forward")

  link_eta_Come[1] = link_eta_Go[1]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  link_eta_Come[2] = link_eta_Go[2]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  
  local gauge_link = link_along_b[1]
  for mm = 2, #link_along_b do
    gauge_link = gauge_link * link_along_b[mm]
  end

  local gauge_link_eta_Go = link_eta_Go[1]
  for mm = 2, #link_eta_Go do
    gauge_link_eta_Go = gauge_link_eta_Go * link_eta_Go[mm]
  end

  local gauge_link_eta_Come = link_eta_Come[1]
  for mm = 2, #link_eta_Come do
    gauge_link_eta_Come = link_eta_Come[mm] * gauge_link_eta_Come
  end
  return gauge_link_eta_Go * gauge_link * gauge_link_eta_Come
end



local function sideLink_13(U)
  local link_along_b = {}
  local link_eta_Go = {}
  local link_eta_Come = {}

  local linkb = {}
  linkb[1] = U[0+1]
  linkb[2] = U[1+1]:shift(0, "from_forward")
  linkb[3] = linkb[1]:shift(0, "from_forward"):shift(1, "from_forward")

  link_along_b[1] = linkb[1]:shift(0, "from_forward"):shift(2, "from_forward")
  link_along_b[2] = linkb[2]:shift(0, "from_forward"):shift(2, "from_forward")
  link_along_b[3] = linkb[3]:shift(0, "from_forward"):shift(2, "from_forward")

  link_eta_Go[1] = U[1+0]
  link_eta_Go[2] = U[1+2]:shift(0, "from_forward")

  link_eta_Come[1] = link_eta_Go[1]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  link_eta_Come[2] = link_eta_Go[2]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  
  local gauge_link = link_along_b[1]
  for mm = 2, #link_along_b do
    gauge_link = gauge_link * link_along_b[mm]
  end

  local gauge_link_eta_Go = link_eta_Go[1]
  for mm = 2, #link_eta_Go do
    gauge_link_eta_Go = gauge_link_eta_Go * link_eta_Go[mm]
  end

  local gauge_link_eta_Come = link_eta_Come[1]
  for mm = 2, #link_eta_Come do
    gauge_link_eta_Come = link_eta_Come[mm] * gauge_link_eta_Come
  end
  return gauge_link_eta_Go * gauge_link * gauge_link_eta_Come
end



local function sideLink_31m2(U)
  local link_along_b = {}
  local link_eta_Go = {}
  local link_eta_Come = {}

  local linkb = {}
  linkb[1] = U[0+1]
  linkb[2] = U[1+1]:shift(0, "from_forward")
  linkb[3] = linkb[1]:shift(0, "from_forward"):shift(1, "from_forward")

  link_along_b[1] = linkb[1]:shift(2, "from_forward"):shift(0, "from_forward"):shift(1, "from_backward")
  link_along_b[2] = linkb[2]:shift(2, "from_forward"):shift(0, "from_forward"):shift(1, "from_backward")
  link_along_b[3] = linkb[3]:shift(2, "from_forward"):shift(0, "from_forward"):shift(1, "from_backward")

  link_eta_Go[1] = U[1+2]
  link_eta_Go[2] = U[1+0]:shift(2, "from_forward")
  link_eta_Go[3] = U[1+1]:shift(1, "from_backward"):shift(2, "from_forward"):shift(0, "from_forward"):adjoin()

  link_eta_Come[1] = link_eta_Go[1]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  link_eta_Come[2] = link_eta_Go[2]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  link_eta_Come[3] = link_eta_Go[3]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  
  local gauge_link = link_along_b[1]
  for mm = 2, #link_along_b do
    gauge_link = gauge_link * link_along_b[mm]
  end

  local gauge_link_eta_Go = link_eta_Go[1]
  for mm = 2, #link_eta_Go do
    gauge_link_eta_Go = gauge_link_eta_Go * link_eta_Go[mm]
  end

  local gauge_link_eta_Come = link_eta_Come[1]
  for mm = 2, #link_eta_Come do
    gauge_link_eta_Come = link_eta_Come[mm] * gauge_link_eta_Come
  end
  return gauge_link_eta_Go * gauge_link * gauge_link_eta_Come
end



local function sideLink_m21m2(U)
  local link_along_b = {}
  local link_eta_Go = {}
  local link_eta_Come = {}

  local linkb = {}
  linkb[1] = U[0+1]
  linkb[2] = U[1+1]:shift(0, "from_forward")
  linkb[3] = linkb[1]:shift(0, "from_forward"):shift(1, "from_forward")

  link_along_b[1] = linkb[1]:shift(0, "from_forward"):shift(1, "from_backward"):shift(1, "from_backward")
  link_along_b[2] = linkb[2]:shift(0, "from_forward"):shift(1, "from_backward"):shift(1, "from_backward")
  link_along_b[3] = linkb[3]:shift(0, "from_forward"):shift(1, "from_backward"):shift(1, "from_backward")

  link_eta_Go[1] = U[1+1]:shift(1, "from_backward"):adjoin()
  link_eta_Go[2] = U[1+0]:shift(1, "from_backward")
  link_eta_Go[3] = link_eta_Go[1]:shift(0, "from_forward"):shift(1, "from_backward")

  link_eta_Come[1] = link_eta_Go[1]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  link_eta_Come[2] = link_eta_Go[2]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  link_eta_Come[3] = link_eta_Go[3]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  
  local gauge_link = link_along_b[1]
  for mm = 2, #link_along_b do
    gauge_link = gauge_link * link_along_b[mm]
  end

  local gauge_link_eta_Go = link_eta_Go[1]
  for mm = 2, #link_eta_Go do
    gauge_link_eta_Go = gauge_link_eta_Go * link_eta_Go[mm]
  end

  local gauge_link_eta_Come = link_eta_Come[1]
  for mm = 2, #link_eta_Come do
    gauge_link_eta_Come = link_eta_Come[mm] * gauge_link_eta_Come
  end
  return gauge_link_eta_Go * gauge_link * gauge_link_eta_Come
end



local function sideLink_m2131(U)
  local link_along_b = {}
  local link_eta_Go = {}
  local link_eta_Come = {}

  local linkb = {}
  linkb[1] = U[0+1]
  linkb[2] = U[1+1]:shift(0, "from_forward")
  linkb[3] = linkb[1]:shift(0, "from_forward"):shift(1, "from_forward")

  link_along_b[1] = linkb[1]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_backward"):shift(2, "from_forward")
  link_along_b[2] = linkb[2]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_backward"):shift(2, "from_forward")
  link_along_b[3] = linkb[3]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_backward"):shift(2, "from_forward")

  link_eta_Go[1] = U[1+1]:shift(1, "from_backward"):adjoin()
  link_eta_Go[2] = U[1+0]:shift(1, "from_backward")
  link_eta_Go[3] = U[1+2]:shift(1, "from_backward"):shift(0, "from_forward")
  link_eta_Go[4] = link_eta_Go[2]:shift(2, "from_forward"):shift(0, "from_forward")

  link_eta_Come[1] = link_eta_Go[1]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  link_eta_Come[2] = link_eta_Go[2]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  link_eta_Come[3] = link_eta_Go[3]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  link_eta_Come[4] = link_eta_Go[4]:shift(0, "from_forward"):shift(0, "from_forward"):shift(1, "from_forward"):adjoin()
  
  local gauge_link = link_along_b[1]
  for mm = 2, #link_along_b do
    gauge_link = gauge_link * link_along_b[mm]
  end

  local gauge_link_eta_Go = link_eta_Go[1]
  for mm = 2, #link_eta_Go do
    gauge_link_eta_Go = gauge_link_eta_Go * link_eta_Go[mm]
  end

  local gauge_link_eta_Come = link_eta_Come[1]
  for mm = 2, #link_eta_Come do
    gauge_link_eta_Come = link_eta_Come[mm] * gauge_link_eta_Come
  end
  return gauge_link_eta_Go * gauge_link * gauge_link_eta_Come
end




function staple_link(U, check)
  if check == 1 then
    return linkPath_121(U)
  end
  if check == 2 then
    return sideLink_31(U)
  end
  if check == 3 then
    return sideLink_13(U)
  end
  if check == 4 then
    return sideLink_31m2(U)
  end
  if check == 5 then
    return sideLink_m21m2(U)
  end
  if check == 6 then
    return sideLink_m2131(U)
  end
end
